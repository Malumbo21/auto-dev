package cc.unitmesh.devins.completion.providers

import cc.unitmesh.agent.tool.registry.GlobalToolRegistry
import cc.unitmesh.agent.tool.registry.ToolRegistry
import cc.unitmesh.devins.completion.BaseCompletionProvider
import cc.unitmesh.devins.completion.CompletionContext
import cc.unitmesh.devins.completion.CompletionItem
import cc.unitmesh.devins.completion.CompletionTriggerType
import cc.unitmesh.devins.completion.InsertResult

class ToolBasedCommandCompletionProvider(
    private val toolRegistry: ToolRegistry = GlobalToolRegistry.getInstance()
) : BaseCompletionProvider(setOf(CompletionTriggerType.COMMAND)) {

    override fun getCompletions(context: CompletionContext): List<CompletionItem> {
        val query = context.queryText
        val tools = toolRegistry.getAllTools()

        val completionItems = tools.values.map { tool ->
            CompletionItem(
                text = tool.name,
                displayText = tool.name,
                description = tool.description,
                icon = getToolIcon(tool.name),
                insertHandler = createCommandInsertHandler(tool.name)
            )
        }

        return filterAndSort(completionItems, query)
    }

    /**
     * Ê†πÊçÆÂ∑•ÂÖ∑ÂêçÁß∞Ëé∑ÂèñÂØπÂ∫îÁöÑÂõæÊ†á
     */
    private fun getToolIcon(toolName: String): String {
        return when (toolName) {
            "read-file" -> "üìÑ"
            "write-file" -> "‚úèÔ∏è"
            "grep" -> "üîç"
            "glob" -> "üåê"
            "shell" -> "üíª"
            else -> "üîß"
        }
    }

    /**
     * ÂàõÂª∫ÂëΩ‰ª§ÊèíÂÖ•Â§ÑÁêÜÂô®
     * Ê†πÊçÆÂëΩ‰ª§Á±ªÂûãÂÜ≥ÂÆöÊèíÂÖ•Á©∫Ê†ºËøòÊòØÂÜíÂè∑
     */
    private fun createCommandInsertHandler(commandName: String): (String, Int) -> InsertResult {
        return { fullText, cursorPos ->
            val slashPos = fullText.lastIndexOf('/', cursorPos - 1)
            if (slashPos >= 0) {
                val before = fullText.substring(0, slashPos)
                val after = fullText.substring(cursorPos)

                // Ê†πÊçÆÂëΩ‰ª§Á±ªÂûãÂÜ≥ÂÆöÂêéÁºÄ
                val suffix = when {
                    // ÈúÄË¶ÅÂèÇÊï∞ÁöÑÂëΩ‰ª§‰ΩøÁî®ÂÜíÂè∑
                    commandName in listOf("read-file", "write-file", "file", "write", "read") -> ":"
                    // ÂÖ∂‰ªñÂëΩ‰ª§‰ΩøÁî®Á©∫Ê†º
                    else -> " "
                }

                val newText = before + "/$commandName$suffix" + after
                InsertResult(
                    newText = newText,
                    newCursorPosition = before.length + commandName.length + 2,
                    shouldTriggerNextCompletion = suffix == ":" // Â¶ÇÊûúÊòØÂÜíÂè∑ÔºåËß¶Âèë‰∏ã‰∏ÄÁ∫ßË°•ÂÖ®
                )
            } else {
                InsertResult(fullText, cursorPos)
            }
        }
    }
}